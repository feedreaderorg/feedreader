@page "/login"
@page "/login/{OAuthProvider}"
@inject NavigationManager NavigationManager

@if (App.CurrentUser.Role != UserRole.Guest || string.IsNullOrEmpty(OAuthProvider))
{
    NavigationManager.NavigateTo("/");
}
else
{
    <Waiting Text="logging in"/>
}

@code
{
    [Parameter]
    public string OAuthProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(OAuthProvider))
        {
            try
            {
                var redirectUri = await App.CurrentUser.LoginAsync(ExtractJwtTokenFromCallbackUri(NavigationManager.Uri));
                if (!string.IsNullOrEmpty(redirectUri) && Uri.IsWellFormedUriString(redirectUri, UriKind.Absolute))
                {
                    NavigationManager.NavigateTo(redirectUri);
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
            catch (Exception ex)
            {
                var title = HttpUtility.UrlEncode("Login Failed");
                var detail = HttpUtility.UrlEncode(ex.Message);
                var backTitle = HttpUtility.UrlEncode("Back to Login");
                var backUri = HttpUtility.UrlEncode("/login");
                NavigationManager.NavigateTo($"/error?title={title}&detail={detail}&backTitle={backTitle}&backUri={backUri}");
            }
        }
    }

    private string ExtractJwtTokenFromCallbackUri(string callbackUri)
    {
        // Get jwt token from the uri.
        var fragment = callbackUri.Substring(callbackUri.IndexOf('#') + 1);
        var queries = HttpUtility.ParseQueryString(fragment);
        var token = queries["id_token"];
        if (token == null)
        {
            var error = queries["error"];
            if (error == null)
            {
                throw new Exception($"Unexpected error in callback uri: {callbackUri}.");
            }
            else
            {
                throw new Exception($"Get error from callback uri: {error}");
            }
        }
        else
        {
            return token;
        }
    }
}
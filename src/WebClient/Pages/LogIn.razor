@page "/login"
@page "/login/{OAuthProvider}"
@inject NavigationManager NavigationManager

@if (CurrentUser.Role != UserRole.Guest)
{
    NavigationManager.NavigateTo("/");
}
else if (string.IsNullOrEmpty(OAuthProvider))
{
    var callbackUri = NavigationManager.ToAbsoluteUri("/login/microsoft");
    var microsoftLoginUri = $"https://login.microsoftonline.com/consumers/oauth2/v2.0/authorize?client_id=dcaaa2ba-a614-4b8c-b78e-1fb39cb8899a&redirect_uri={callbackUri}&response_type=id_token&scope=openid+profile&nonce=feedreader";

    <div class="login">
        <div class="wrapper">
            <div class="title">Welcome back</div>
            <a class="btn" href="@microsoftLoginUri"><img src="img/microsoft.svg"><span>Continue with Microsoft</span></a>
            <a class="btn"><img src="img/google.svg"><span>Continue with Google</span></a>
            <div class="term">By continuing, you agree to FeedReader &nbsp;<br /><a href="/terms">Terms of Service</a>,&nbsp;<a href="/privacy">Privacy Policy</a></div>
        </div>
    </div>
}
else
{
    <Waiting Text="logging in"/>
}

@code
{
    [CascadingParameter]
    public User CurrentUser { get; set; }

    [Parameter]
    public string OAuthProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(OAuthProvider))
        {
            try
            {
                await CurrentUser.LoginAsync(ExtractJwtTokenFromCallbackUri(NavigationManager.Uri));
                NavigationManager.NavigateTo("/");
            }
            catch (Exception ex)
            {
                var title = HttpUtility.UrlEncode("Login Failed");
                var detail = HttpUtility.UrlEncode(ex.Message);
                var backTitle = HttpUtility.UrlEncode("Back to Login");
                var backUri = HttpUtility.UrlEncode("/login");
                NavigationManager.NavigateTo($"/error?title={title}&detail={detail}&backTitle={backTitle}&backUri={backUri}");
            }
        }
    }

    private string ExtractJwtTokenFromCallbackUri(string callbackUri)
    {
        // Get jwt token from the uri.
        var fragment = callbackUri.Substring(callbackUri.IndexOf('#') + 1);
        var queries = HttpUtility.ParseQueryString(fragment);
        var token = queries["id_token"];
        if (token == null)
        {
            var error = queries["error"];
            if (error == null)
            {
                throw new Exception($"Unexpected error in callback uri: {callbackUri}.");
            }
            else
            {
                throw new Exception($"Get error from callback uri: {error}");
            }
        }
        else
        {
            return token;
        }
    }
}
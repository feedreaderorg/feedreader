<div class="feed-item @ClassName panel @(IsReaded ? "readed" : "")">
    <div class="head text-nowrap">
        <span class="d-none d-lg-block me-1">Posted by</span>
        <img class="me-1" src="@Item.Feed.IconUri"/>
        <a href="/feed/@Item.Feed.SubscriptionName" class="feed-name">@Item.Feed.Name</a>
        <span>@Item.PublishTime.ToLocalTime()</span>
    </div>
    <a  href="@Item.Link" target="_blank" class="body">
        <div class="title-and-summary">
            <div class="title">@Item.Title</div>
            <div class="summary">@Item.Summary</div>
        </div>
        @if (!string.IsNullOrEmpty(Item.PictureUri))
        {
            <div class="picture">
                <img src="@Item.PictureUri"/>
            </div>
        }
    </a>
    <div class="footer">
        <ul>
            <li @onclick="ToggleFavorite">
                <i class="bi @(IsFavorited ? "bi-star-fill" : "bi-star")"></i> @TotalFavorites
            </li>
        </ul>
    </div>
</div>

@code
{
    [Parameter]
    public string ClassName { get; set;  }

    [Parameter]
    public Models.FeedItem Item { get; set; }

    private bool IsReaded => Item.Feed.LastReadedTime >= Item.PublishTime;

    private bool IsFavorited { get; set; }

    private int TotalFavorites { get; set;  }

    protected override void OnParametersSet()
    {
        IsFavorited = App.CurrentUser.Favorites.Find(f => f.Id == Item.Id) != null;
        TotalFavorites = Math.Max(IsFavorited ? 1 : 0, Item.TotalFavorites);
    }

    private async Task ToggleFavorite()
    {
        if (IsFavorited)
        {
            IsFavorited = false;
            --TotalFavorites;
        }
        else
        {
            IsFavorited = true;
            ++TotalFavorites;
        }

        await App.CurrentUser.AddOrRemoveFavorite(Item, IsFavorited);
        StateHasChanged();
    }
}
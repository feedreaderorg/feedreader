@page "/home"
@inherits LoginRequiredPageBase
@layout LeftSideBarLayout

<div class="add-page flex-grow-1">
	<div class="page-content flex-column">
		<div class="panel flex-grow-1 mb-3">
			<div class="search">
				<Search Placeholder="Search by link, name, description ..." InputChanged="@OnSearchRssChanged" />
			</div>
		</div>
		@if (SearchingCount != 0 || RecommededFeeds == null && Feeds == null)
		{
			<div class="panel waitting">
				<img src="img/loading-buffering.gif"/>
			</div>
		}
		else
		{
			var feeds = Feeds ?? RecommededFeeds;
			if (Feeds == null)
			{
				<div class="title fs-4 ms-2 mb-2">You may like ...</div>
			}

			<div class="panel feeds mb-3">
				@foreach (var feed in feeds)
				{
					<a class="feed" href="@($"/feed/{feed.SubscriptionName}")">
						<img src="@feed.IconUri" />
						<div class="content vstack gap-2">
							<div class="name">@feed.Name</div>
							<div class="description">@feed.Description</div>
							<div class="toolbar">
								<div class="statics hstack gap-3">
									<div><i class="bi bi-people" />@feed.TotalSubscribers</div>
									<div><i class="bi bi-newspaper" />@feed.TotalPosts</div>
									<div><i class="bi bi-star-fill" />@feed.TotalFavorites</div>
								</div>
							</div>
						</div>
					</a>
				}
			</div>
		}
	</div>
</div>

@code
{
	List<Feed> RecommededFeeds { get; set; }

	List<Feed> Feeds { get; set; }

	int SearchingCount { get; set; }

	CancellationTokenSource SearchRssCancellationSource { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var response = await App.CurrentUser.WebServerApi.DiscoverFeedsAsync(new Share.Protocols.DiscoverFeedsRequest()
		{
			Count = 10
		});
		RecommededFeeds = response.Feeds.Select(f => f.ToModelFeed()).ToList();
	}

	async Task OnSearchRssChanged(string query)
	{	
		Feeds = null;
		++SearchingCount;

		if (SearchRssCancellationSource != null)
		{
			SearchRssCancellationSource.Cancel();
			SearchRssCancellationSource.Dispose();
			SearchRssCancellationSource = null;
		}

		SearchRssCancellationSource = new CancellationTokenSource();
		try
		{	
			Feeds = await CurrentUser.SearchFeedAsync(query, SearchRssCancellationSource.Token);
		}
		catch
		{
		}
		--SearchingCount;
	}
}
@implements IDisposable

<div class="left-side-bar d-flex flex-column flex-grow-1">
	<div class="flex-grow-1">
		<div class="section vstack gap-3">
			<NavLink href="/" Match="NavLinkMatch.All">
				<img src="img/home.png" /> Home
			</NavLink>

			<NavLink href="/favorites" Match="NavLinkMatch.All">
				<img src="img/favorite.png" /> My favorites
			</NavLink>
		</div>
		@if (SubscribedFeeds != null)
		{
			<div class="section vstack gap-3">
				<div class="title">MY FEEDS</div>
				@foreach (var feed in SubscribedFeeds)
				{
					<NavLink class="@(feed.HasNewItems ? "has-new-items" : "")" href="@($"/feed/{feed.SubscriptionName}")" Match="NavLinkMatch.All">
						<img src="@feed.IconUri" /> @feed.Name
					</NavLink>
				}
			</div>
		}
	</div>
	<hr/>
	<div class="bottom">
		<ul>
			<li>
				<a href="/logout">
					<img src="/img/logout.png"><span>Log out</span>
				</a>
			</li>
		</ul>
	</div>
</div>

@code
{
	[CascadingParameter]
	public User CurrentUser { get; set; }

	private Feed[] SubscribedFeeds { get; set; }

	protected override void OnParametersSet()
	{
		if (SubscribedFeeds != null)
		{
			foreach (var feed in SubscribedFeeds)
			{
				feed.OnStateChanged -= (s, e) => StateHasChanged();
			}
		}
		SubscribedFeeds = CurrentUser.SubscribedFeeds.ToArray();
		foreach (var feed in SubscribedFeeds)
		{
			feed.OnStateChanged += (s, e) => StateHasChanged();
		}
	}

	public void Dispose()
	{
		if (SubscribedFeeds != null)
		{
			foreach (var feed in SubscribedFeeds)
			{
				feed.OnStateChanged -= (s, e) => StateHasChanged();
			}
		}
	}
}
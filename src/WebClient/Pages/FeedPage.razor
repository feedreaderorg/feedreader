@page "/feed/{FeedSubscriptionName}"
@layout LeftSideBarLayout
@implements IDisposable
@inject NavigationManager NavigationManager
@using FeedItem = Widgets.FeedItem

<div class="feed-page d-flex flex-grow-1 flex-column">
    @if (Feed == null)
    {
        <div class="waitting d-flex flex-grow-1 justify-content-center align-items-center" style="cursor: wait;">
			<img src="img/loading-buffering.gif" style="width: 32px; height: 32px;"/>
		</div>
    }
    else
    {
        <div class="page-header">
            <h1 class="text-nowrap text-truncate">@Feed.Name</h1>
            @if (CurrentUser.Role != UserRole.Guest)
            {
                <div class="flex-grow-1 flex-lg-grow-0" />
                @if (IsSubscribed)
                {
                    <ActionButton ClassName="btn-primary ms-3 btn-sm" Text="Unfollow" OnClick="@(() => CurrentUser.UnsubscribeFeedAsync(Feed))"/>
                    <ActionButton ClassName="btn-primary ms-3 btn-sm" Text="Readed" OnClick="@Feed.MarkAsReaded" />
                }
                else
                {
                    <ActionButton ClassName="btn-primary ms-3 btn-sm" Text="Follow" OnClick="@(() => CurrentUser.SubscribeFeedAsync(Feed))"/>
                }
            }
        </div>
        <div class="page-content">
            <div class="feed-items-panel d-flex flex-column flex-grow-1 pe-lg-3">
                <InfiniteScrolling ItemsProvider="@((startIndex, count, _) => Feed.GetFeedItems(startIndex, count))" Context="feedItem">
                    <ItemsTemplate>
                        <FeedItem ClassName="mb-3" Item=@feedItem />
                    </ItemsTemplate>
                    <LoadingTemplate>
                        <div class="d-flex justify-content-center">
                            <img class="my-2" src="img/loading-buffering.gif" style="width: 32px; height: 32px;" />
                        </div>
                    </LoadingTemplate>
                </InfiniteScrolling>
            </div>
            <div class="right-side-bar mb-3">
                <div class="feed-description-panel panel">
                    <div class="feed-picture-and-name">
                        <img src="@Feed.IconUri"/>
                        <div class="name">@Feed.Name</div>
                    </div>
                    <div class="feed-stats">
                        <div class="stat">
                            <div class="count">@Feed.TotalSubscribers</div>
                            <div class="label">Subscribers</div>
                        </div>
                        <div class="stat" style="text-align: center">
                            <div class="count">@Feed.TotalPosts</div>
                            <div class="label">Post</div>
                        </div>
                        <div class="stat" style="text-align: right">
                            <div class="count">@Feed.TotalFavorites</div>
                            <div class="label">Favorites</div>
                        </div>
                    </div>
                    <div class="feed-about">
                        <div class="label">ABOUT</div>
                        <div class="about">@Feed.Description</div>
                        <div class="actions container">
                            @if (CurrentUser.Role != UserRole.Guest)
                            {
                                if (IsSubscribed)
                                {
                                    <div class="row gap-2 mb-2">
                                        @if (!Feed.ForceSubscribed)
                                        {
                                            <ActionButton ClassName="btn-primary btn-sm col" Text="Unfollow" OnClick="@(() => CurrentUser.UnsubscribeFeedAsync(Feed))" />
                                        }
                                        <ActionButton ClassName="btn-primary btn-sm col" Text="Readed" OnClick="@Feed.MarkAsReaded" />
                                    </div>
                                }
                                else
                                {
                                    <div class="row gap-2 mb-2">
                                        <ActionButton ClassName="btn-primary btn-sm col" Text="Follow" OnClick="@(() => SubscribeAsync(Feed))" />
                                        <ActionButton ClassName="btn-primary btn-sm col" Text="Readed" OnClick="@Feed.MarkAsReaded" />
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="row gap-2 mb-2">
                                    <ActionButton ClassName="btn-primary btn-sm" Text="Follow" OnClick="@(() => SubscribeAsync(Feed))" />
                                </div>
                            }
                            <div class="row gap-2">
                                @if (!string.IsNullOrEmpty(Feed.RssUri))
                                {
                                    <a href="@Feed.RssUri" target="_blank" class="btn btn-primary btn-sm col">
                                        <i class="bi bi-rss" /> Rss
                                    </a>
                                }
                                @if (!string.IsNullOrEmpty(Feed.SiteLink))
                                {
                                    <a href="@Feed.SiteLink" target="_blank" class="btn btn-primary btn-sm col">
                                       <i class="bi bi-box-arrow-up-right" /> Website
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="site-info mt-2">
                    <div class="copy-right">&copy;2023 FeedReader.org</div>
                </div>
            </div>
        </div>
    }
</div>

@code
{
    [Parameter]
    public string FeedSubscriptionName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Action { get; set; }

    [CascadingParameter]
    public User CurrentUser { get; set; }

    private Feed Feed { get; set; }

    private bool IsSubscribed => Feed.Subscribed == null ? CurrentUser.SubscribedFeeds.FirstOrDefault(f => f.Id == Feed.Id)?.Subscribed == true : Feed.Subscribed == true;

    protected override async Task OnParametersSetAsync()
    {
        if (Feed != null)
        {
            Feed.OnStateChanged -= (s, e) => StateHasChanged();
        }

        Feed = await App.CurrentUser.GetFeed(FeedSubscriptionName);
        if (Feed == null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Feed.OnStateChanged += (s, e) => StateHasChanged();

            if (Action == "Follow")
            {
                await CurrentUser.SubscribeFeedAsync(Feed);
                NavigationManager.NavigateTo($"/feed/{FeedSubscriptionName}");
            }
        }
    }

    public void Dispose()
    {
        if (Feed != null)
        {
            Feed.OnStateChanged -= (s, e) => StateHasChanged();
        }
    }

    private async Task SubscribeAsync(Feed feed)
    {
        if (CurrentUser.Role == UserRole.Guest)
        {
            await PopupManager.Instance.OpenPopup(@<SignInDialog RedirectUri="@NavigationManager.ToAbsoluteUri($"/Feed/{feed.SubscriptionName}?action=Follow").ToString()" />);
        }
        else
        {
            await CurrentUser.SubscribeFeedAsync(Feed);
        }
    }
}
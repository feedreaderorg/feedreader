@page "/"
@inherits LoginRequiredPageBase
@layout LeftSideBarLayout

<div class="add-page flex-grow-1">
	<div class="page-content flex-column">
		<div class="panel flex-grow-1 mb-3">
			<div class="search">
				<Search Placeholder="Search by link, name, description ..." InputChanged="@OnSearchRssChanged" />
			</div>
		</div>
		@if (SearchingCount != 0)
		{
			<div class="panel waitting">
				<img src="img/loading-buffering.gif"/>
			</div>
		}
		else if (Feeds != null)
		{
			var index = 0;
			<div class="panel feeds mb-3">
				@foreach (var g in Feeds.GroupBy(f => index++ / 2))
				{
					<div class="row">
					@foreach (var feed in g)
					{
						<div class="feed-wrapper">
							<a class="feed" href="@($"/feed/{feed.SubscriptionName}")">
								<img src="@feed.IconUri" />
								<div class="content vstack gap-2">
									<div class="name">@feed.Name</div>
									<div class="description">@feed.Description</div>
									<div class="toolbar">
										<div class="statics hstack gap-3">
											<div><i class="bi bi-people" />@feed.TotalSubscribers</div>
											<div><i class="bi bi-newspaper" />@feed.TotalPosts</div>
											<div><i class="bi bi-star-fill" />@feed.TotalFavorites</div>
										</div>
									</div>
								</div>
							</a>
						</div>
					}
					@if (g.Count() % 2 == 1)
					{
						<div class="feed-wrapper"/>
					}
					</div>
				}
			</div>
		}
	</div>
</div>

@code
{
	List<Feed> Feeds { get; set; }

	int SearchingCount { get; set; }

	CancellationTokenSource SearchRssCancellationSource { get; set; }

	async Task OnSearchRssChanged(string query)
	{	
		Feeds = null;
		++SearchingCount;

		if (SearchRssCancellationSource != null)
		{
			SearchRssCancellationSource.Cancel();
			SearchRssCancellationSource.Dispose();
			SearchRssCancellationSource = null;
		}

		SearchRssCancellationSource = new CancellationTokenSource();
		try
		{	
			Feeds = await CurrentUser.SearchFeedAsync(query, SearchRssCancellationSource.Token);
		}
		catch
		{
		}
		--SearchingCount;
	}

	async Task Subscribe(Feed feed)
	{
		await CurrentUser.SubscribeFeedAsync(feed);
		++feed.TotalSubscribers;
		StateHasChanged();
	}

	async Task Unsubscribe(Feed feed)
	{
		await CurrentUser.UnsubscribeFeedAsync(feed);
		--feed.TotalSubscribers;
		StateHasChanged();
	}
}
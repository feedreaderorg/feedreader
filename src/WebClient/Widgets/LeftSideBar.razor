@implements IDisposable

<div class="left-side-bar d-flex flex-column flex-grow-1">
	<div class="flex-grow-1">
		<div class="section vstack gap-3">
			<NavLink href="/" Match="NavLinkMatch.All">
				<img src="img/home.png" /> Home
			</NavLink>

			@if (CurrentUser.Role != UserRole.Guest)
			{
				<NavLink href="/favorites" Match="NavLinkMatch.All">
					<img src="img/favorite.png" /> My favorites
				</NavLink>
			}
		</div>
		<div class="section vstack gap-3">
			@if (CurrentUser.Role != UserRole.Guest && SubscribedFeeds != null)
			{
				<div class="title">MY FEEDS</div>
				@foreach (var feed in SubscribedFeeds)
				{
					<NavLink class="@(feed.HasNewItems ? "has-new-items d-inline-block text-truncate" : "text-truncate")" href="@($"/feed/{feed.SubscriptionName}")" Match="NavLinkMatch.All" title="@feed.Name">
						<img src="@feed.IconUri" /> @feed.Name
					</NavLink>
				}
			}
			else
			{
				<div class="title">YOU MAY LIKE</div>
				<div><i>TODO</i></div>
			}
		</div>
	</div>
	@if (CurrentUser.Role != UserRole.Guest)
	{
		<hr/>
		<div class="bottom">
			<ul>
				<li>
					<a href="/logout">
						<img src="/img/logout.png"><span>Log out</span>
					</a>
				</li>
			</ul>
		</div>
	}
</div>

@code
{
	[CascadingParameter]
	public User CurrentUser { get; set; }

	private Feed[] SubscribedFeeds { get; set; }

	protected override void OnParametersSet()
	{
		if (SubscribedFeeds != null)
		{
			foreach (var feed in SubscribedFeeds)
			{
				feed.OnStateChanged -= (s, e) => StateHasChanged();
			}
		}
		SubscribedFeeds = CurrentUser.SubscribedFeeds.ToArray();
		foreach (var feed in SubscribedFeeds)
		{
			feed.OnStateChanged += (s, e) => StateHasChanged();
		}
	}

	public void Dispose()
	{
		if (SubscribedFeeds != null)
		{
			foreach (var feed in SubscribedFeeds)
			{
				feed.OnStateChanged -= (s, e) => StateHasChanged();
			}
		}
	}
}
@page "/add"
@layout LeftSideBarLayout

<div class="add-page">
	<div class="page-header">
		<h1>Add Feed</h1>
	</div>
	<div class="panel">
		<div class="search">
			<Search Placeholder="Search RSS link" InputChanged="@OnSearchRssChanged" />
		</div>
	</div>
	@if (SearchingCount != 0)
	{
		<div class="panel waitting">
			<img src="img/loading-buffering.gif"/>
		</div>
	}
	else if (Feeds != null)
	{
		var index = 0;
		<div class="panel feeds">
			@foreach (var g in Feeds.GroupBy(f => index++ / 2))
			{
				<div class="row">
				@foreach (var feed in g)
				{
					<div class="feed-wrapper">
						<div class="feed">
							<img src="@feed.IconUri" />
							<div class="content">
								<div class="name">@feed.Name</div>
								<div class="description">@feed.Description</div>
								<div class="toolbar">
									<div class="statics"><i class="far fa-user"></i>@feed.TotalSubscribers</div>
									<div class="actions">
										@if (CurrentUser.SubscribedFeeds.Find(f => f.Id == feed.Id) == null)
										{
											<ActionButton Text="subscribe" OnClick="@(() => Subscribe(feed))"/>
										}
										else
										{
											<ActionButton Text="unsubscribe" OnClick="@(() => Unsubscribe(feed))"/>
										}
									</div>
								</div>
							</div>
						</div>
					</div>
				}
				@if (g.Count() % 2 == 1)
				{
					<div class="feed-wrapper"/>
				}
				</div>
			}
		</div>
	}
</div>

@code
{
	[CascadingParameter]
	User CurrentUser { get; set; }

	List<Feed> Feeds { get; set; }

	int SearchingCount { get; set; }

	CancellationTokenSource SearchRssCancellationSource { get; set; }

	async Task OnSearchRssChanged(string query)
	{	
		Feeds = null;
		++SearchingCount;

		if (SearchRssCancellationSource != null)
		{
			SearchRssCancellationSource.Cancel();
			SearchRssCancellationSource.Dispose();
			SearchRssCancellationSource = null;
		}

		SearchRssCancellationSource = new CancellationTokenSource();
		try
		{	
			Feeds = await CurrentUser.SearchFeedAsync(query, SearchRssCancellationSource.Token);
		}
		catch
		{
		}
		--SearchingCount;
	}

	async Task Subscribe(Feed feed)
	{
		await CurrentUser.SubscribeFeedAsync(feed);
		++feed.TotalSubscribers;
		StateHasChanged();
	}

	async Task Unsubscribe(Feed feed)
	{
		await CurrentUser.UnsubscribeFeedAsync(feed);
		--feed.TotalSubscribers;
		StateHasChanged();
	}
}
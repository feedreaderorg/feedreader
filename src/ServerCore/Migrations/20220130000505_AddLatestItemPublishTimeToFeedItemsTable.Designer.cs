// <auto-generated />
using System;
using FeedReader.ServerCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace FeedReader.ServerCore.Migrations
{
    [DbContext(typeof(DbContext))]
    [Migration("20220130000505_AddLatestItemPublishTimeToFeedItemsTable")]
    partial class AddLatestItemPublishTimeToFeedItemsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FeedReader.ServerCore.Models.Favorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedInfoId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "FeedItemId");

                    b.HasIndex("FeedInfoId");

                    b.HasIndex("FeedItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.FeedInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("IconUri")
                        .HasColumnType("text");

                    b.Property<Guid>("IdFromUri")
                        .HasColumnType("uuid");

                    b.Property<string>("LastParseError")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LatestItemPublishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "SubscriptionName", "Description" });

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("text");

                    b.Property<int>("TotalFavorites")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPosts")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSubscribers")
                        .HasColumnType("integer");

                    b.Property<string>("Uri")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdFromUri")
                        .IsUnique();

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("SubscriptionName")
                        .IsUnique();

                    b.ToTable("FeedInfos");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.FeedItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("uuid");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("PictureUri")
                        .HasColumnType("text");

                    b.Property<DateTime>("PublishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("TotalFavorites")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.ToTable("FeedItems");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.FeedSubscription", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastReadedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "FeedId");

                    b.HasIndex("FeedId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedSubscriptions");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MimeType")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.UserOAuthIds", b =>
                {
                    b.Property<string>("OAuthIssuer")
                        .HasColumnType("text");

                    b.Property<string>("OAuthId")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("OAuthIssuer", "OAuthId");

                    b.ToTable("UserOAuthIds");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.Favorite", b =>
                {
                    b.HasOne("FeedReader.ServerCore.Models.FeedInfo", "FeedInfo")
                        .WithMany()
                        .HasForeignKey("FeedInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedReader.ServerCore.Models.FeedItem", "FeedItem")
                        .WithMany()
                        .HasForeignKey("FeedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedReader.ServerCore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedInfo");

                    b.Navigation("FeedItem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.FeedItem", b =>
                {
                    b.HasOne("FeedReader.ServerCore.Models.FeedInfo", "Feed")
                        .WithMany("FeedItems")
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.FeedSubscription", b =>
                {
                    b.HasOne("FeedReader.ServerCore.Models.FeedInfo", "Feed")
                        .WithMany()
                        .HasForeignKey("FeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FeedReader.ServerCore.Models.User", "User")
                        .WithMany("SubscribedFeeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feed");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.FeedInfo", b =>
                {
                    b.Navigation("FeedItems");
                });

            modelBuilder.Entity("FeedReader.ServerCore.Models.User", b =>
                {
                    b.Navigation("SubscribedFeeds");
                });
#pragma warning restore 612, 618
        }
    }
}
